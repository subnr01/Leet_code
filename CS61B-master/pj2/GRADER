                                     GRADER

Name of student running submit: Aparna Dhinakaran
Login of student running submit: cs61b-zt

Second team member's name: Alex Romano
Second team member's login: cs61b-fu

Third team member's name (if any): Daniel Au
Third team member's login: cs61b-abs

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors? yes


Have you tested your program on the machines in the Soda CS 61B lab? yes


Did you successfully implement game tree search? Yes
Did you successfully implement alpha-beta pruning? Yes
Are there any limitations on it? 
What is the default number of search levels set by the one-parameter MachinePlayer constructor? 3


Describe your board evaluation function in some detail.
Our evaluation function takes in a Board object and assigns it a score using 2 factors:
1. A higher score is given if this piece is placed in the goal areas.
2. Gives a higher score according to how many more connections "this" player has to opponent player. 


Does your MachinePlayer use any special method of choosing the first few moves? No, it probably should though.


Is there anything else the graders should know to help them read your project?
No.

Describe the classes, modules, and interfaces you designed before and while you implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar 	to the list in the "Teamwork" section of the README (but hopefully 	more detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and behavior of each method that is available for external callers (outside the module) to call.  Don't include methods that are only meant to be called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be sure to modify this file to reflect these changes before you submit your project.  Your design of classes and interfaces with be worth about 10% of your
grade.

__CLASSES__
MachinePlayer
Board
Move
BestMove
DList
DListNode
InvalidNodeException


__MODULES__

1) There is a module that makes/verifies legal moves in the game. 
Classes: Board 
Implemented by Aparna Dhinakaran, Daniel Au, and Alex Romano

Determines whether a move is valid or not based on the rules of the Network game
 * @param m the move being evaluated
 * @param playerColor the player being evauluated
*@return true if the move is valid, false otherwise
*null otherwise
protected boolean isValidMove(Move m, int playerColor) 

makeMove takes a legal move and an int player and changes the board. It can make
    an add move or a step move and it labels the move as which it is. It adds the piece and needs to 
    decrement the amount of pieces left for each player.
    @param m - Takes in a move to make
    @ param playerColor - Determines which player the move is made for for chip color
protected void makeMove(Move m, int playerColor) takes a valid Move m, and the color of the player and places the move on the board taking into account what type of move it is.  It also decrements the number of pieces left for each color.


public boolean forceMove(Move m);
     /**
     * forceMove will update the board with move, m, for "this" player if the move
     * is legal and return true.  forceMove will return false if otherwise.
     *
     * @param m the Move object to be updated on the internal board.
     * @return true if the move is legal and applied, false if otherwise.
     */


2) There is a module that keeps track of the internal game board state.
Classes: Board
Implemented by Aparna Dhinakaran and Alex Romano

Constructs a Board object, setting each spot on the board to EMPTY initially. This is where the board state is kept.
instance variable gameBoard is a two dimensional int array that keeps track of all the spots of the board.  Using static ints, the int in gameBoard corresponds to the color (0 for black, 1 for white) or -1 if the square is empty.
public Board() is its basic constructor which creates a new empty board.

getSquare determines the contents of the board at a given coordinate
    *@param x the x coordinate of the spot
    *@param y the y coordinate of the spot
    *@return the contents of the board in that spot (-1, 0, 1 for empty, black, or white)
protected int getSquare(int x, int y) returns the int representing the color chip on the coordinate (x,y) or if the square is empty.


3) There is a module that checks if a color has created a network.
Classes: Board
Implemented by Aparna Dhinakaran and Daniel Au

hasNetwork returns true if this board has a network with 6 or greater length. It otherwise 
    *returns false. It takes in a player because it is called on the board. It calls a recursive, private function travel
     that repeatedly 
    *@param player the player whose network is being determined
    *@return true if this board has a network with 6 or greater length or false otherwise
protected boolean hasNetwork(int playerColor) returns a boolean value whether or not a certain color has created a valid network or not.  It uses the Travel method and currentConnections methods

4) There is a module that finds the best move for a player to make
Classes:
MachinePlayer 
Implemented by Alex Romano
This method uses minimax to find the best move possible. It uses alpha beta pruning to a certain depth, and evauluates each board, scoring it based on chance of winning
        * @param color is the color of the player who's moves we are currently looking for.
        * @returns a Move which holds the highest scoring move, and hence gives best chance of winning.
protected Move findBest(int color)


Data Structures
     
    #### DList
     public DList();
     /**
     * This constructor will create a new empty DList.  
     */

     public boolean isEmpty();
     /**
     * isEmpty() will return true if "this" DList is empty and false otherwise.
     *
     * @return true if "this" DList is empty, false if otherwise.
     */

     public int length();
     /**
     * length() will return an integer with the number of elements in "this" DList
     *
     * @return an int of how many elements are in "this" DList.
     */

     public void insertFront(Object item);
     /**
     * insertFront will insert a new DListNode containing "item" in the front of
     * "this" DList.
     *
     * @param item the Object to be inserted at the front of "this" DList.
     */

     public void insertBack(Object item);
     /**
     * insertBack will insert a new DListNode containing "item" at the end of 
     * "this" DList.
     *
     * @param item the Object to be inserted at the end of "this" DList.
     */

     public DListNode front();
     /**
     * front() returns the DListNode at the front of of "this" DList.  If "this"
     * DList is empty, return an invalid node.
     *
     * @return the DListNode at the front of "this" DList.
     */

     public DListNode back();
     /**
     * back() returns the DListNode at the back of "this" DList.  If "this" DList
     * is empty, return an invalid node.
     *
     * @return the DListNode at the front of "this" DList.
     */


     public boolean within(int[] n);
	/**
	*This method checked if an int array object was stored within the DList. It traveled through the DList until it found this int array. 
	*@ returned True if it was within the DList or false if not within the DList. 

     
     public String toString();
     /**
     * toStrong() returns the String representation of "this" DList for debugging.
     *
     * @return the String representation of "this" DList.
     */

    #### DListNode
     protected DListNode(Object i, DList l, DListNode p, DListNode n);
     /** 
     * This creates a new DListNode.
     * @param i the Object to be contained in the node.
     * @param l the DList that "this" node is a part of.
     * @param p the preceding DListNode.
     * @param n the next DListNode.
     */

     public boolean isValidNode():
     /**
     * isValidNode() returns true if "this" node is valid and false if otherwise.
     *
     * @return true if "this" node is valid, false if otherwise.
     */

     public Object item() throws InvalidNodeException;
     /**
     * item() returns the item for "this" node.  If the node is invalid, it throws
     * an exception.
     *
     * @return the Object contained in "this" node.
     * @exception InvalidNodeException if the node isn't valid.
     */

     public void setItem(Object item) throws InvalidNodeException;
     /**
     * setItem sets "this" node's item to "item".  If "this" node is invalid,
     * it throws an exception.
     * 
     * @param item the Object to be stored in "this" node.
     * @exception InvalidNodeException if the node isn't valid.
     */
     
     public DListNode next() throws InvalidNodeException;
     /** 
     * next() returns the DListNode after "this" node.  If the node is invalid,
     * it throws an exception.
     *
     * @return the DListNode after "this" node.
     * @exception InvalidNodeException if "this" node is invalid.
     */
     
     public DListNode prev() throws InvalidNodeException;
     /**
     * prev() returns the DListNode before "this" node.  If the node is invalid, 
     * it throws an exception.
     *
     * @return the DListNode before "this" node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void insertAfter(Object item) throws InvalidNodeException;
     /**
     * insertAfter inserts a new DListNode containing "item" after "this" node.
     * If the node is invalid, it throws an exception.
     *
     * @param item the Object to be inserted in the new node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void insertBefore(Object item) throws InvalidNodeException;
     /** 
     * insertBefore inserts a new DListNode containing "item" before "this" node.
     * If the node is invalid, it throws an exception.
     *
     * @param item the Object to be inserted in the new node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void remove() throws InvalidNodeException;
     /**
     * remove() removes "this" node from it's DList.  If the node is invalid, an
     * exception is thrown.
     *
     * @exception InvalidNodeException if "this" node is invalid.
     */
    
    #### InvalidNodeException
     protected InvalidNodeException();
     /**
     * This creates a new exception that signals when a program attempts to use an
     * invalid node.
     */

   