ADT Corruption

Name: Aparna Dhinakaran
Login: cs61b-zt


The remove method can corupt our DList because it can change the size invariant. While the fields of the DList, head and size, are protected and cannot be changed from outside of the package, the methods of DList are public and can be accessed outside the package through some application. In the remove method, the input is a DListNode, but it doesn't check if that DListNode is within the list we are calling the remove method upon. We can access a DListNode of any list we create through the public front and back methods. We can therefore attempt to remove the front of another instance of DList (lets say DList2) even though the remove method is called on an instance of DList called DList1. However, we decrement the size of DList1 even though we have not attempted removed any DListNode from that list. This similiar issue can be seen in the insertBefore and insertAfter methods because the DListNode we pass in as the input is not necessarily part of the DList instance we are calling the method on. We do not check if the DListNode is in the DList we are trying to remove it from. We have also trespassed the DListNode abstraction by returning a DListNode in the public front and back methods. The result is that the size of an instance that has not been changed in that particular way has been changed, leading to a corruption. 
