Project 3 Data Structures, Design Implementation, and Run-Time Analysis
========================================================================

CLASSES
========

WUGraph.java
Kruskal.java
EdgeEntry.java
VertexEntry.java
VertexPair.java
Neighbors.java
Edge.java
ListSorts.java
HashTableChained.java
DList.java
DListNode.java
Entry.java
Dictionary.java
ListNode.java
InvalidNodeException.java
List.java
DisjointSets.java
LinkedQueue.java
Queue.java
QueueEmptyException.java
SList.java
SListNode.java


DATA STRUCTURES
================
1. DisjointSets
2. LinkedQueues
3. HashTableChained
4. DList
5. DListNode
6. SList
7. SListNode
8. InvalidNodeException 
9. QueueEmptyException 


DATA STRUCTURE IMPLEMENTATIONS
==============================


### DisjointSets

    /**
   *  Construct a disjoint sets object.
   *
   *  @param numElements the initial number of elements--also the initial
   *  number of disjoint sets, since every element is initially in its own set.
   **/
  public DisjointSets(int numElements) {}

  /**
   *  union() unites two disjoint sets into a single set.  A union-by-size
   *  heuristic is used to choose the new root.  This method will corrupt
   *  the data structure if root1 and root2 are not roots of their respective
   *  sets, or if they're identical.
   *
   *  @param root1 the root of the first set.
   *  @param root2 the root of the other set.
   **/
  public void union(int root1, int root2) {}

  /**
   *  find() finds the (int) name of the set containing a given element.
   *  Performs path compression along the way.
   *
   *  @param x the element sought.
   *  @return the set containing x.
   **/
  public int find(int x) {}

  /**
   *  returns a string of the disjoint set array
   *  @return string of array
   **/
  public String toString(){}



### LinkedQueues

/**
   *  LinkedQueue() constructs an empty queue.
   **/
  public LinkedQueue() {}

  /** 
   *  size() returns the size of this Queue.
   *  @return the size of this Queue.
   *  Performance:  runs in O(1) time.
   **/
  public int size() {}

  /**
   *  isEmpty() returns true if this Queue is empty, false otherwise.
   *  @return true if this Queue is empty, false otherwise. 
   *  Performance:  runs in O(1) time.
   **/
  public boolean isEmpty() {}

  /**
   *  enqueue() inserts an object at the end of the Queue.
   *  @param item the item to be enqueued.
   **/
  public void enqueue(Object item) {}

  /**
   *  dequeue() removes and returns the object at the front of the Queue.
   *  @return the item dequeued.
   *  @throws a QueueEmptyException if the Queue is empty.
   **/
  public Object dequeue() throws QueueEmptyException {}

  /**
   *  front() returns the object at the front of the Queue.
   *  @return the item at the front of the Queue.
   *  @throws a QueueEmptyException if the Queue is empty.
   **/
  public Object front() throws QueueEmptyException {}

  /**
   *
   *  nth() returns the nth item in this LinkedQueue.
   *    Items in the queue are numbered from 1.
   *  @param n the number of the item to return.
   */
  public Object nth(int n) {}

  /**
   *  append() appends the contents of q onto the end of this LinkedQueue.
   *    On completion, q is empty.
   *  @param q the LinkedQueue whose contents should be appended onto this
   *    LinkedQueue.
   **/
  public void append(LinkedQueue q) {}

  /**
   *  toString() converts this queue to a String.
   **/
  public String toString() {}




#### HashTableChained
	
   /**
   * Prime() finds a prime number close to an upper bound
   *
   * @param upperBound search for primes up to this number
   * @return a prime number close to upperBound
   **/
  protected int Prime(int upperBound) {}
    
  /** 
   *  Construct a new empty hash table intended to hold roughly sizeEstimate
   *  entries.  (The precise number of buckets is up to you, but we recommend
   *  you use a prime number, and shoot for a load factor between 0.5 and 1.)
   **/

  public HashTableChained(int sizeEstimate) {}

  /** 
   *  Construct a new empty hash table with a default size.  Say, a prime in
   *  the neighborhood of 100.
   **/

  public HashTableChained() {}

  /**
   *  Converts a hash code in the range Integer.MIN_VALUE...Integer.MAX_VALUE
   *  to a value in the range 0...(size of hash table) - 1.
   *
   *  @param code, a hash code
   *  @return the hashcode after compression
   **/

  int compFunction(int code) {}

  /** 
   *  Returns the number of entries stored in the dictionary.  Entries with
   *  the same key (or even the same key and value) each still count as
   *  a separate entry.
   *  @return number of entries in the dictionary.
   **/

  public int size() {}

  /** 
   *  Tests if the dictionary is empty.
   *
   *  @return true if the dictionary has no entries; false otherwise.
   **/

  public boolean isEmpty() {}

  /**
   *  Create a new Entry object referencing the input key and associated value,
   *  and insert the entry into the dictionary.  Return a reference to the new
   *  entry.  Multiple entries with the same key (or even the same key and
   *  value) can coexist in the dictionary.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the key by which the entry can be retrieved.
   *  @param value an arbitrary object.
   *  @return an entry containing the key and value.
   **/

  public Entry insert(Object key, Object value) {}

  /** 
   *  Search for an entry with the specified key.  If such an entry is found,
   *  return it; otherwise return null.  If several entries have the specified
   *  key, choose one arbitrarily and return it.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the search key.
   *  @return an entry containing the key and an associated value, or null if
   *          no entry contains the specified key.
   **/

  public Entry find(Object key) {}

  /** 
   *  Remove an entry with the specified key.  If such an entry is found,
   *  remove it from the table and return it; otherwise return null.
   *  If several entries have the specified key, choose one arbitrarily, then
   *  remove and return it.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the search key.
   *  @return an entry containing the key and an associated value, or null if
   *          no entry contains the specified key.
   */

  public Entry remove(Object key) {}

  /**
   *  Remove all entries from the dictionary.
   */
  public void makeEmpty() {}
  
  /**
   * returns the number of collisions expected
   * @return number of collisions expected
   **/
  public double collisionExpected(){}
  
  /**
   * return number of collisions in actuality after searching through the hashtable
   * @return actual number of collisions
   **/
   
  public int collisions(){}

     
#### DList
     public DList();
     /**
     * This constructor will create a new empty DList.  
     */

     public boolean isEmpty();
     /**
     * isEmpty() will return true if "this" DList is empty and false otherwise.
     *
     * @return true if "this" DList is empty, false if otherwise.
     */

     public int length();
     /**
     * length() will return an integer with the number of elements in "this" DList
     *
     * @return an int of how many elements are in "this" DList.
     */

     public void insertFront(Object item);
     /**
     * insertFront will insert a new DListNode containing "item" in the front of
     * "this" DList.
     *
     * @param item the Object to be inserted at the front of "this" DList.
     */

     public void insertBack(Object item);
     /**
     * insertBack will insert a new DListNode containing "item" at the end of 
     * "this" DList.
     *
     * @param item the Object to be inserted at the end of "this" DList.
     */

     public DListNode front();
     /**
     * front() returns the DListNode at the front of of "this" DList.  If "this"
     * DList is empty, return an invalid node.
     *
     * @return the DListNode at the front of "this" DList.
     */

     public DListNode back();
     /**
     * back() returns the DListNode at the back of "this" DList.  If "this" DList
     * is empty, return an invalid node.
     *
     * @return the DListNode at the front of "this" DList.
     */

     
     public String toString();
     /**
     * toStrong() returns the String representation of "this" DList for debugging.
     *
     * @return the String representation of "this" DList.
     */

#### DListNode
     protected DListNode(Object i, DList l, DListNode p, DListNode n);
     /** 
     * This creates a new DListNode.
     * @param i the Object to be contained in the node.
     * @param l the DList that "this" node is a part of.
     * @param p the preceding DListNode.
     * @param n the next DListNode.
     */

     public boolean isValidNode():
     /**
     * isValidNode() returns true if "this" node is valid and false if otherwise.
     *
     * @return true if "this" node is valid, false if otherwise.
     */

     public Object item() throws InvalidNodeException;
     /**
     * item() returns the item for "this" node.  If the node is invalid, it throws
     * an exception.
     *
     * @return the Object contained in "this" node.
     * @exception InvalidNodeException if the node isn't valid.
     */

     public void setItem(Object item) throws InvalidNodeException;
     /**
     * setItem sets "this" node's item to "item".  If "this" node is invalid,
     * it throws an exception.
     * 
     * @param item the Object to be stored in "this" node.
     * @exception InvalidNodeException if the node isn't valid.
     */
     
     public DListNode next() throws InvalidNodeException;
     /** 
     * next() returns the DListNode after "this" node.  If the node is invalid,
     * it throws an exception.
     *
     * @return the DListNode after "this" node.
     * @exception InvalidNodeException if "this" node is invalid.
     */
     
     public DListNode prev() throws InvalidNodeException;
     /**
     * prev() returns the DListNode before "this" node.  If the node is invalid, 
     * it throws an exception.
     *
     * @return the DListNode before "this" node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void insertAfter(Object item) throws InvalidNodeException;
     /**
     * insertAfter inserts a new DListNode containing "item" after "this" node.
     * If the node is invalid, it throws an exception.
     *
     * @param item the Object to be inserted in the new node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void insertBefore(Object item) throws InvalidNodeException;
     /** 
     * insertBefore inserts a new DListNode containing "item" before "this" node.
     * If the node is invalid, it throws an exception.
     *
     * @param item the Object to be inserted in the new node.
     * @exception InvalidNodeException if "this" node is invalid.
     */

     public void remove() throws InvalidNodeException;
     /**
     * remove() removes "this" node from it's DList.  If the node is invalid, an
     * exception is thrown.
     *
     * @exception InvalidNodeException if "this" node is invalid.
     */

###SList 
/**
   *  SList() constructs for an empty SList.
   **/
  public SList() {}

  /**
   *  SList() constructs an SList with one nonsentinel node
   **/
  public SList(Object n){}

  /**
   *  insertFront() inserts an item at the front of this SList.
   *
   *  @param item is the item to be inserted.
   *
   *  Performance:  runs in O(1) time.
   **/
  public void insertFront(Object item) {}
    
  /**
   *  insertBack() inserts an item at the back of this SList.
   *
   *  @param item is the item to be inserted.
   *
   *  Performance:  runs in O(1) time.
   **/
  public void insertBack(Object item) {}
 
  /**
   *  front() returns the node at the front of this SList.  If the SList is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.
   *
   *  @return a ListNode at the front of this SList.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode front() {}
    
  /**
   *  back() returns the node at the back of this SList.  If the SList is
   *  empty, return an "invalid" node--a node with the property that any
   *  attempt to use it will cause an exception.
   *
   *  @return a ListNode at the back of this SList.
   *
   *  Performance:  runs in O(1) time.
   */
  public ListNode back() {}

  /**
   *  toString() returns a String representation of this SList.
   *
   *  @return a String representation of this SList.
   *
   *  Performance:  runs in O(n) time, where n is the length of the list.
   */
  public String toString() {}






###SListNode
   /**
   *  SListNode() (with one parameter) constructs a list node referencing the
   *  item "obj".
   */

  SListNode(Object obj) {}

  /**
   *  SListNode() (with two parameters) constructs a list node referencing the
   *  item "obj", whose next list node is to be "next".
   */

  SListNode(Object obj, SListNode next) {}


    
#### InvalidNodeException
     protected InvalidNodeException();
     /**
     * This creates a new exception that signals when a program attempts to use an
     * invalid node.
     */

###QueueEmptyException
     /**
	* This creates a new exception that signals when a program attempts to call an empty queue.
	* There are two constructors. The first is without a String statement that follows the exception. 
	* The second constructor has a String statement that is provided when an exception is invoked. 
	*/	

  public QueueEmptyException() {}
    
  public QueueEmptyException(String s) {}
    


  
Part 1: WUGraph.java

Design Implementation and Run-Time Analysis
===========================================







Part 2: Kruskal's Algorithm

Design Implementation and Run-Time Analysis
============================================