Part 2 Questions

Overarching Question: 
How you could use depth-first search to generate a random maze (or more importantly, lots of different random mazes), without using disjoint sets at all?

We can generate a random maze using a random spanning tree and perform depth-first search on the tree. A tree is a data structure with hierarchy so it inherently avoids cyclical traversal through its elements. This implementation avoids disjoint sets. 


(a) How would your algorithm ensure that there is a path between every pair of cells, but no more than one path between any pair of cells (i.e., no
 cycles)?

This algorithm ensures that there is a path between every pair of cells between every cell because it implements a tree structure where each cell, which could be represented as a node can travel back to the root if necessary and from the root it can travel to the other cell. Therefore, every cell (node) is connected to another node. However, even though we can guarantee a path between every pair of cells, we can also be sure that there is no more than one path. Since a tree structure is based on hierarchy, there cannot be cycles so there is only path between any pair of cells. By avoiding cycles, we know that the two cells are connected through one particular path. 


(b) How does your algorithm use random numbers to generate a different maze each time? Specifically, what decision should be made by random numbers at each recursive invocation of the depth-first search method?

This algorithm starts from a random cell and then selects a random neighboring cell that has not yet been visited. The computer uses random numbers to select the start position and the next neighboring cell to visit. The computer continues this process of using random number generation to reach a dead-end at which point it moves to the next unvisited neighbor to continue depth-first search, extending and generating a different maze.. This process continues until every  cell has been visited at which point the computer moves all the way back to the beginning cell. 

Specifically, at each recursive invocation of the depth-first search method, it has to mark the initial cell has visited. Then, while there are no unvisited cells, if the cell has any unvisited neighbors, random numbers chooses one of the unvisited neighbors and pushes it off the stack and removes the "wall" between the current cell and the chosen cell. Otherwise, if the stack is not empty, it pops a cell off and makes it the current cell. Otherwise, it picks another random cell and makes it the current and marks it as visit and recurse. 