GRADER file for Homework 8

 Your Name:  Aparna Dhinakaran
Your Login:  cs61b-zt

Part III.  Running time comparisons

  List size         mergesort             quicksort
       10             0 msec		0 msec	
      100 		 5 msec		4 msec
    1,000		55 msec		27 msec
   10,000		176 msec		113 msec
  100,000		938 msec		876 msec

It is clear from the run time comparisons that quicksort is faster than mergesort. 

Part IV.

  Is mergesort stable?  
  Why or why not?
	Mergesort is not stable. When we use mergesort using this implementation, equal keys may not come out in the same order that they went in. We can see this when we take a particular counterexample to show that this mergesort is not stable at all occasions.
In the case where [ 1 2 1'] is the passed in LinkedQueue, we will initially separate each integer to become its own LinkedQueue. The 1' denotes the second 1 that is currently not in order.
It becomes this : [ [1] [2] [1] ] after makeQueueofQueues is called on the initial LinkedQueue. At this point, it will use mergeSortedQueues to merge the first two LinkedQueues. 
The LinkedQueue of LinkedQueues will now look like this : [ [1'] [1 2] ] We can see that we enqueued it to the end. Now when we can mergesort, the [1'] and the [1 2] will be selected, but in the mergesort implementation, if the first element of each Linked Queue are equal, we take the first. 
Therefore, the LinkedQueue after mergesort is called on it will result in [1' 1 2], thereby changing the order of the equal keys. 
Even if we had placed the second LinkedQueues equal key in front of the first equal key, this would have not have worked in a situation where the first equal key part of the first LinkedQueue was initially before the second equal key. 
This mergesort therefore is instable and does not maintain the order of equal keys. This has been shown by a counterexample to the assumption that mergesort is stable. 

  Is quicksort stable?  
  Why or why not?
Quicksort is stable. In quicksort's implementation, we divide the passed in LinkedQueue into components smaller than the Comparable pivot, components equal to the Comparable pivot, and components greater than the Comparable pivot. Therefore, it will keep the original ordering the keys because it adds to the new LinkedQueues as it traverses through the original LinkedQueue. When equal keys are added to the LinkedQueue for keys equal to the Comparable pivot, they will be added in order of their appearance in the original LinkedQueue.  
Even through the recursive calls, the ordering the new LinkedQueue will go through the order of the initial LinkedQueue so equal keys will maintain their ordering in relation to one another. Thefore, quicksort is stable. 