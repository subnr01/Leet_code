Jose Nino Rivera jnino1@jhu.edu
600.226 Data Structures
Assignment 9: Six Degrees of Kevin Bacon
4/23/14

Problem 1
============
I decided to have a separate color field in my inner class. 
This decision speaks to my paranoia. I understand that this is not
necessary with inner classes, but I wanted to be able to change 
this field to null when deleting both vertices and edges. 

For the implementation I have a couple private methods
to facilitate some functionality. The validateEdge and validateVertex
methods enable the graph to validate the positions passed to
its public methods. 

Moreover, I have a private edgeExists method that enables me to 
efficiently determine if an edge exists between two vertices. 

I decided to have two ArrayList memebers (one for vertices and 
one for edges) to hold all the vertices and edges that are currently
in the graph.

Problem 2
=============
To solve the bacon problem I first check to see if the actor is 
kevin bacon, thus finishing the program printing only Kevin Bacon.

If not, I use a Queue (with Java's interface, and using a LinkedList
as the implementation) to perform a breadth first search on my Graph
While the queue is not empty, and I have not yet found the actor of 
interest, I continue to pop the head of the queue and explore the 
graph from it (I call this the viewpoint).

Here the Vertex labels is the Vertex from which the Labeled vertex
was "viewed from". If a vertex is not labeled, then it can be added to
the queue. The other option is that if the vertex is in fact the actor 
of interest, the loop must break

Then I build the path back to kevin bacon by moving back on the vertices
labels, printing the name of the movies and actors. 

Note on clearing labels. I clearLabels at the beginning of my function
to make sure that I will perform a correct search. I do this again at the 
end just to be sure that I clean up after myself (In this small program it 
doesnt matter, but if I were executing different graph algorithms on this 
graph, I should be sure that I leave the graph in a clean state)


About testing
================
I did not test every invalid position exception in every function 
because the exception is thrown in a private class, having tested 
it once I am confident it is correct.
