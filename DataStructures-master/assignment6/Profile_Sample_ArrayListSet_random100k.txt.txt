JAVA PROFILE 1.0.1, created Tue Mar 25 21:09:30 2014

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000170, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000170, id = 200005, name="DestroyJavaVM", group="main")
THREAD END (id = 200005)
TRACE 300169:
	ArrayListSetUnique.main(ArrayListSetUnique.java:30)
TRACE 300190:
	java.io.FileOutputStream.writeBytes(FileOutputStream.java:Unknown line)
	java.io.FileOutputStream.write(FileOutputStream.java:345)
	java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
	java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
TRACE 300163:
	java.util.ArrayList.contains(ArrayList.java:281)
	ArrayListSet.insert(ArrayListSet.java:39)
	ArrayListSetUnique.main(ArrayListSetUnique.java:30)
TRACE 300178:
	java.util.regex.Pattern$GroupTail.match(Pattern.java:4615)
	java.util.regex.Pattern$BranchConn.match(Pattern.java:4466)
	java.util.regex.Pattern$BmpCharProperty.match(Pattern.java:3715)
	java.util.regex.Pattern$Branch.match(Pattern.java:4502)
TRACE 300174:
	java.util.regex.Pattern$Curly.match(Pattern.java:4125)
	java.util.regex.Pattern$Start.match(Pattern.java:3408)
	java.util.regex.Matcher.search(Matcher.java:1199)
	java.util.regex.Matcher.find(Matcher.java:592)
TRACE 300175:
	java.util.regex.Pattern$Curly.match(Pattern.java:4125)
	java.util.regex.Matcher.match(Matcher.java:1221)
	java.util.regex.Matcher.lookingAt(Matcher.java:636)
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:953)
TRACE 300192:
	java.lang.System.arraycopy(System.java:Unknown line)
	java.io.BufferedOutputStream.write(BufferedOutputStream.java:128)
	java.io.PrintStream.write(PrintStream.java:480)
	sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
TRACE 300161:
	java.util.ArrayList.contains(ArrayList.java:281)
	ArrayListSet.insert(ArrayListSet.java:39)
	ArrayListSetUnique.main(ArrayListSetUnique.java:30)
TRACE 300179:
	java.util.regex.Pattern$Ques.match(Pattern.java:4079)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	java.util.regex.Pattern$Branch.match(Pattern.java:4502)
TRACE 300182:
	java.util.Scanner.hasNextInt(Scanner.java:2071)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
	ArrayListSetUnique.main(ArrayListSetUnique.java:28)
TRACE 300171:
	ArrayListSetUnique.main(ArrayListSetUnique.java:31)
TRACE 300162:
	java.util.Arrays.copyOfRange(Arrays.java:2694)
	java.lang.String.<init>(String.java:203)
	java.nio.HeapCharBuffer.toString(HeapCharBuffer.java:561)
	java.nio.CharBuffer.toString(CharBuffer.java:1201)
TRACE 300185:
	ArrayListSetUnique.main(ArrayListSetUnique.java:28)
TRACE 300172:
	sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:311)
	sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	java.io.InputStreamReader.read(InputStreamReader.java:184)
	java.io.Reader.read(Reader.java:100)
TRACE 300173:
	ArrayListSetUnique.main(ArrayListSetUnique.java:28)
TRACE 300176:
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	java.util.regex.Pattern$Ques.match(Pattern.java:4079)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
TRACE 300177:
	java.util.Scanner.hasNextInt(Scanner.java:2068)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
	ArrayListSetUnique.main(ArrayListSetUnique.java:28)
TRACE 300180:
	java.util.regex.Matcher.usePattern(Matcher.java:280)
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:1006)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
TRACE 300048:
	java.security.Permissions.add(Permissions.java:138)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:695)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:316)
	java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:206)
TRACE 300183:
	java.util.regex.Pattern$Curly.match0(Pattern.java:4177)
	java.util.regex.Pattern$Curly.match(Pattern.java:4132)
	java.util.regex.Pattern$Start.match(Pattern.java:3408)
	java.util.regex.Matcher.search(Matcher.java:1199)
TRACE 300184:
	java.util.regex.Matcher.group(Matcher.java:445)
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:1009)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
TRACE 300186:
	java.util.regex.Pattern$Branch.match(Pattern.java:4502)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	java.util.regex.Pattern$Curly.match2(Pattern.java:4203)
	java.util.regex.Pattern$Curly.match(Pattern.java:4136)
TRACE 300187:
	java.util.regex.Pattern$Curly.match0(Pattern.java:4148)
	java.util.regex.Pattern$Curly.match(Pattern.java:4132)
	java.util.regex.Pattern$Start.match(Pattern.java:3408)
	java.util.regex.Matcher.search(Matcher.java:1199)
TRACE 300188:
	java.util.regex.Pattern$Curly.match(Pattern.java:4132)
	java.util.regex.Matcher.match(Matcher.java:1221)
	java.util.regex.Matcher.lookingAt(Matcher.java:636)
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:953)
TRACE 300189:
	java.util.Arrays.copyOf(Arrays.java:2245)
	java.util.Arrays.copyOf(Arrays.java:2219)
	java.util.ArrayList.toArray(ArrayList.java:358)
	java.util.ArrayList.<init>(ArrayList.java:164)
TRACE 300191:
	java.nio.HeapCharBuffer.<init>(HeapCharBuffer.java:70)
	java.nio.CharBuffer.wrap(CharBuffer.java:369)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:265)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
TRACE 300193:
	java.nio.ByteBuffer.array(ByteBuffer.java:960)
	sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
	sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)
	sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)
TRACE 300194:
	java.lang.Integer.toString(Integer.java:331)
	java.lang.Integer.toString(Integer.java:739)
	java.lang.String.valueOf(String.java:2854)
	java.io.PrintStream.println(PrintStream.java:821)
TRACE 300195:
	sun.nio.cs.StreamEncoder.ensureOpen(StreamEncoder.java:44)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:118)
	java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)
	java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)
TRACE 300196:
	java.lang.Integer.toString(Integer.java:328)
	java.lang.Integer.toString(Integer.java:739)
	java.lang.String.valueOf(String.java:2854)
	java.io.PrintStream.println(PrintStream.java:821)
TRACE 300034:
	java.util.zip.ZipFile.open(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.<init>(ZipFile.java:215)
	java.util.zip.ZipFile.<init>(ZipFile.java:145)
	java.util.jar.JarFile.<init>(JarFile.java:153)
TRACE 300107:
	java.util.ServiceLoader.reload(ServiceLoader.java:212)
	java.util.ServiceLoader.<init>(ServiceLoader.java:218)
	java.util.ServiceLoader.load(ServiceLoader.java:473)
	java.util.ServiceLoader.loadInstalled(ServiceLoader.java:533)
TRACE 300136:
	java.text.DecimalFormatSymbols.initialize(DecimalFormatSymbols.java:566)
	java.text.DecimalFormatSymbols.<init>(DecimalFormatSymbols.java:94)
	java.text.DecimalFormatSymbols.getInstance(DecimalFormatSymbols.java:157)
	java.text.NumberFormat.getInstance(NumberFormat.java:767)
TRACE 300024:
	java.util.zip.ZipFile.getEntryMethod(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.getZipEntry(ZipFile.java:538)
	java.util.zip.ZipFile.getEntry(ZipFile.java:308)
	java.util.jar.JarFile.getEntry(JarFile.java:226)
TRACE 300154:
	java.nio.Buffer.remaining(Buffer.java:383)
	java.nio.CharBuffer.length(CharBuffer.java:1220)
	java.util.regex.Matcher.getTextLength(Matcher.java:1234)
	java.util.regex.Matcher.reset(Matcher.java:308)
TRACE 300153:
	java.util.regex.Pattern$Curly.match(Pattern.java:4126)
	java.util.regex.Matcher.match(Matcher.java:1221)
	java.util.regex.Matcher.lookingAt(Matcher.java:636)
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:953)
TRACE 300155:
	java.util.regex.Pattern$BitClass.isSatisfiedBy(Pattern.java:3281)
	java.util.regex.Pattern$BmpCharProperty.match(Pattern.java:3715)
	java.util.regex.Pattern$Branch.match(Pattern.java:4502)
	java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
TRACE 300156:
	java.lang.CharacterData.of(CharacterData.java:77)
	java.lang.Character.isWhitespace(Character.java:6599)
	java.util.regex.Pattern$CharPropertyNames$21.isSatisfiedBy(Pattern.java:5639)
	java.util.regex.Pattern$CharProperty.match(Pattern.java:3694)
TRACE 300157:
	java.lang.Character.codePointAt(Character.java:4668)
	java.util.regex.Pattern$CharProperty.match(Pattern.java:3693)
	java.util.regex.Pattern$Curly.match(Pattern.java:4125)
	java.util.regex.Matcher.match(Matcher.java:1221)
TRACE 300158:
	java.nio.HeapCharBuffer.subSequence(HeapCharBuffer.java:576)
	java.nio.HeapCharBuffer.subSequence(HeapCharBuffer.java:42)
	java.util.regex.Matcher.getSubSequence(Matcher.java:1245)
	java.util.regex.Matcher.group(Matcher.java:490)
TRACE 300159:
	java.lang.System.arraycopy(System.java:Unknown line)
	java.util.Arrays.copyOfRange(Arrays.java:2695)
	java.lang.String.<init>(String.java:203)
	java.nio.HeapCharBuffer.toString(HeapCharBuffer.java:561)
TRACE 300160:
	java.lang.String.<init>(String.java:200)
	java.nio.HeapCharBuffer.toString(HeapCharBuffer.java:561)
	java.nio.CharBuffer.toString(CharBuffer.java:1201)
	java.util.regex.Matcher.group(Matcher.java:490)
TRACE 300164:
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:999)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
TRACE 300165:
	java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:212)
	java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)
	java.util.ArrayList.add(ArrayList.java:440)
	ArrayListSet.insert(ArrayListSet.java:40)
TRACE 300166:
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:1006)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
TRACE 300167:
	ArrayListSet.ensureNotNull(ArrayListSet.java:28)
	ArrayListSet.insert(ArrayListSet.java:38)
	ArrayListSetUnique.main(ArrayListSetUnique.java:30)
TRACE 300168:
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:950)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
TRACE 300170:
	java.util.Scanner.getCompleteTokenInBuffer(Scanner.java:950)
	java.util.Scanner.hasNext(Scanner.java:1485)
	java.util.Scanner.hasNextInt(Scanner.java:2065)
	java.util.Scanner.hasNextInt(Scanner.java:2050)
CPU SAMPLES BEGIN (total = 1263) Tue Mar 25 21:09:44 2014
rank   self  accum   count trace method
   1 89.31% 89.31%    1128 300169 ArrayListSetUnique.main
   2  3.88% 93.19%      49 300190 java.io.FileOutputStream.writeBytes
   3  1.27% 94.46%      16 300163 java.util.ArrayList.contains
   4  0.40% 94.85%       5 300178 java.util.regex.Pattern$GroupTail.match
   5  0.40% 95.25%       5 300174 java.util.regex.Pattern$Curly.match
   6  0.32% 95.57%       4 300175 java.util.regex.Pattern$Curly.match
   7  0.32% 95.88%       4 300192 java.lang.System.arraycopy
   8  0.32% 96.20%       4 300161 java.util.ArrayList.contains
   9  0.32% 96.52%       4 300179 java.util.regex.Pattern$Ques.match
  10  0.24% 96.75%       3 300182 java.util.Scanner.hasNextInt
  11  0.16% 96.91%       2 300171 ArrayListSetUnique.main
  12  0.16% 97.07%       2 300162 java.util.Arrays.copyOfRange
  13  0.16% 97.23%       2 300185 ArrayListSetUnique.main
  14  0.08% 97.31%       1 300172 sun.nio.cs.StreamDecoder.implRead
  15  0.08% 97.39%       1 300173 ArrayListSetUnique.main
  16  0.08% 97.47%       1 300176 java.util.regex.Pattern$GroupHead.match
  17  0.08% 97.55%       1 300177 java.util.Scanner.hasNextInt
  18  0.08% 97.62%       1 300180 java.util.regex.Matcher.usePattern
  19  0.08% 97.70%       1 300048 java.security.Permissions.add
  20  0.08% 97.78%       1 300183 java.util.regex.Pattern$Curly.match0
  21  0.08% 97.86%       1 300184 java.util.regex.Matcher.group
  22  0.08% 97.94%       1 300186 java.util.regex.Pattern$Branch.match
  23  0.08% 98.02%       1 300187 java.util.regex.Pattern$Curly.match0
  24  0.08% 98.10%       1 300188 java.util.regex.Pattern$Curly.match
  25  0.08% 98.18%       1 300189 java.util.Arrays.copyOf
  26  0.08% 98.26%       1 300191 java.nio.HeapCharBuffer.<init>
  27  0.08% 98.34%       1 300193 java.nio.ByteBuffer.array
  28  0.08% 98.42%       1 300194 java.lang.Integer.toString
  29  0.08% 98.50%       1 300195 sun.nio.cs.StreamEncoder.ensureOpen
  30  0.08% 98.57%       1 300196 java.lang.Integer.toString
  31  0.08% 98.65%       1 300034 java.util.zip.ZipFile.open
  32  0.08% 98.73%       1 300107 java.util.ServiceLoader.reload
  33  0.08% 98.81%       1 300136 java.text.DecimalFormatSymbols.initialize
  34  0.08% 98.89%       1 300024 java.util.zip.ZipFile.getEntryMethod
  35  0.08% 98.97%       1 300154 java.nio.Buffer.remaining
  36  0.08% 99.05%       1 300153 java.util.regex.Pattern$Curly.match
  37  0.08% 99.13%       1 300155 java.util.regex.Pattern$BitClass.isSatisfiedBy
  38  0.08% 99.21%       1 300156 java.lang.CharacterData.of
  39  0.08% 99.29%       1 300157 java.lang.Character.codePointAt
  40  0.08% 99.37%       1 300158 java.nio.HeapCharBuffer.subSequence
  41  0.08% 99.45%       1 300159 java.lang.System.arraycopy
  42  0.08% 99.52%       1 300160 java.lang.String.<init>
  43  0.08% 99.60%       1 300164 java.util.Scanner.getCompleteTokenInBuffer
  44  0.08% 99.68%       1 300165 java.util.ArrayList.ensureExplicitCapacity
  45  0.08% 99.76%       1 300166 java.util.Scanner.getCompleteTokenInBuffer
  46  0.08% 99.84%       1 300167 ArrayListSet.ensureNotNull
  47  0.08% 99.92%       1 300168 java.util.Scanner.getCompleteTokenInBuffer
  48  0.08% 100.00%       1 300170 java.util.Scanner.getCompleteTokenInBuffer
CPU SAMPLES END
