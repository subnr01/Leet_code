/*
Jose Nino - jnino1@jhu.edu
Data Structures Spring 2014
Assignment 4
*/

README

Problem 1
For problem 1 I designed my calculator in three parts. In main it checks for input and it checks if the input is an operand with a private isOperand function; if it is it pushes it into the stack. If it is not an operand it checks if it is an operator (+,-,*,/); if it is, it uses a funtction called performOperation, which pops two numbers from the stack (checking the validity of doing this), and then performs the appropriate operation. If not it checks if the user wants to print the stack, to print/pop the top of the stack, or to quick the programs. 

Problem 2
I designed my dequeue to look something like this 

front[][][]back. 
When inserting in the front I decrement first and then insert the right element. When inserting in the back I insert and then increment back. I created a private isFull function that checks if the Array is full and a grow function that doubles the length of the array.

Due to my insert design, when I call front I look at that index in the array, but when I call back I look at the "previous" index in the array.

Moreover, deleting is the direct opposite of adding. For front I increment the front index and for back I decrement the front index.

All movements of both and front index are done modulo the size of the array to be able to wrap back on the array. Moreover the decrements are added the size of the array to prevent negative modulo operations. 